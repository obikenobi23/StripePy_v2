# Copyright (C) 2024 Roberto Rossini <roberros@uio.no>
#
# SPDX-License-Identifier: MIT

name: CI

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "src/**"
      - "test/**"
      - ".gitignore"
      - "pyproject.toml"

  pull_request:
    paths:
      - ".github/workflows/ci.yml"
      - "src/**"
      - "test/**"
      - ".gitignore"
      - "pyproject.toml"

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  matrix-factory:
    name: Generate job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-result.outputs.result }}
    steps:
      - name: Generate matrix
        uses: actions/github-script@v7
        id: set-result
        with:
          script: |
            // Documentation
            // https://docs.github.com/en/actions/learn-github-actions/contexts#fromjson
            // https://github.com/actions/runner/issues/982#issuecomment-809360765

            const platforms = ["windows-latest", "macos-latest", "ubuntu-latest"]
            var python_versions = ["3.9", "3.13"]
            if ("${{github.event_name}}" != "pull_request") {
                python_versions = python_versions.concat(["3.10", "3.11", "3.12"])
            }

            var includes = []
            for (const plat of platforms) {
                for (const ver of python_versions) {
                    includes.push({os: plat, python_version: ver})
                }
            }

            return { include: includes }

  ci:
    name: CI
    needs: [matrix-factory]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-factory.outputs.matrix) }}
    runs-on: ${{ matrix.os }}

    env:
      TEST_DATASET_ID: 4DNFI9GMP2J8

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
          cache: pip
          cache-dependency-path: pyproject.toml

      - name: Install package
        run: pip install --verbose '.[test]'

      - name: Run unit tests
        run: python -m pytest test/ -v -m unit

      - name: Run simple CLI tests
        run: |
          stripepy --help
          stripepy --version

      - name: Cache test dataset
        id: cache-dset
        uses: actions/cache/restore@v4
        with:
          key: ${{ env.TEST_DATASET_ID }}
          path: |
            test/data/${{env.TEST_DATASET_ID }}.mcool
            test/data/results*.hdf5

      - name: Download test dataset
        if: steps.cache-dset.outputs.cache-hit != 'true'
        run: |
          mkdir test/data/
          stripepy download \
            --name ${{ env.TEST_DATASET_ID }} \
            --output test/data/${{ env.TEST_DATASET_ID }}.mcool

          stripepy download \
            --name __results_v1 \
            --output test/data/results_4DNFI9GMP2J8_v1.hdf5

      - name: Save test dataset
        if: steps.cache-dset.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ env.TEST_DATASET_ID }}
          path: |
            test/data/${{env.TEST_DATASET_ID }}.mcool
            test/data/results*.hdf5

      - name: Run integration tests
        run: python -m pytest test/ -v -m end2end

  ci-status-check:
    name: Status Check (CI)
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs:
      - ci
    steps:
      - name: Collect job results
        if: needs.ci.result != 'success'
        run: exit 1
