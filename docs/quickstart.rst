..
  Copyright (C) 2025 Andrea Raffo <andrea.raffo@ibv.uio.no>
  SPDX-License-Identifier: MIT

Running StripePy
================

StripePy is organized into a few subcommands:

* ``stripepy call``: run the stripe detection algorithm and store the identified stripes in a ``.hdf5`` file.
* ``stripepy view``: take the ``result.hdf5`` file generated by ``stripepy call`` and extract stripes in BEDPE format.
* ``stripepy plot``: generate various kinds of plots to inspect the stripes identified by ``stripepy call``.
* ``stripepy download``: download a minified sample dataset suitable to quickly test StripePy.

Walkthrough
-----------

The following is an example of a typical run of StripePy.
The steps outlined in this section assume that StripePy is running on a UNIX system.
Some commands may need a bit of tweaking to run on Windows.

1) Download a sample dataset (optional)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Feel free to use your own interaction matrix instead of ``4DNFI9GMP2J8.mcool``.

Please make sure the matrix is in ``.cool``, ``.mcool``, or ``.hic`` format.

.. code-block:: console

  # This may take a while on slow internet connections
  user@dev:/tmp$ stripepy download --name 4DNFI9GMP2J8

  2025-01-14 12:46:01.304277 [info     ] downloading dataset "4DNFI9GMP2J8" (assembly=hg38)...
  2025-01-14 12:46:23.900411 [info     ] DONE! Downloading dataset "4DNFI9GMP2J8" took 22.596s.
  2025-01-14 12:46:23.901141 [info     ] computing MD5 digest for file "/tmp/4DNFI9GMP2J8.dvizz7v1"...
  2025-01-14 12:46:24.050566 [info     ] MD5 checksum match!
  2025-01-14 12:46:24.050695 [info     ] successfully downloaded dataset "https://zenodo.org/records/14643417/files/4DNFI9GMP2J8.stripepy.mcool?download=1" to file "4DNFI9GMP2J8.mcool"
  2025-01-14 12:46:24.050752 [info     ] file size: 106.84MB. Elapsed time: 22.979s


2) Detect architectural stripes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This is the core of the analysis and may take several minutes when processing large files.

.. code-block:: console

  user@dev:/tmp$ stripepy call 4DNFI9GMP2J8.mcool 10000

  2025-04-15 08:13:24.639742 [info     ] running StripePy v1.0.0
  2025-04-15 08:13:24.637358 [info     ] [main      ] CONFIG:
  {
    "constrain_heights": false,
    "contact_map": "4DNFI9GMP2J8.mcool",
    "force": false,
    "genomic_belt": 5000000,
    "glob_pers_min": 0.04,
    "loc_pers_min": 0.33,
    "loc_trend_min": 0.25,
    "log_file": null,
    "max_width": 100000,
    "min_chrom_size": 2000000,
    "normalization": null,
    "nproc": 1,
    "output_file": "/tmp/4DNFI9GMP2J8.10000.hdf5",
    "plot_dir": null,
    "resolution": 10000,
    "roi": null,
    "verbosity": "info"
  }
  2025-04-15 08:13:24.637440 [info     ] [main      ] validating file "4DNFI9GMP2J8.mcool" (10000bp)
  2025-04-15 08:13:24.650236 [info     ] [main      ] file "4DNFI9GMP2J8.mcool" successfully validated
  2025-04-15 08:13:24.650445 [info     ] [IO        ] initializing result file "/tmp/4DNFI9GMP2J8.10000.hdf5"
  2025-04-15 08:13:24.672613 [info     ] [chr1 ] [main      ] begin processing
  2025-04-15 08:13:24.672729 [info     ] [chr1 ] [IO        ] fetching interactions using normalization=NONE
  2025-04-15 08:13:25.483686 [info     ] [chr1 ] [IO        ] fetched 6823257 pixels in 810.948ms
  2025-04-15 08:13:25.483913 [info     ] [chr1 ] [step 1    ] data pre-processing
  2025-04-15 08:13:25.483995 [info     ] [chr1 ] [step 1.1  ] focusing on a neighborhood of the main diagonal
  2025-04-15 08:13:25.535171 [info     ] [chr1 ] [step 1.1  ] removed 0.00% of the non-zero entries (0/6823257)
  2025-04-15 08:13:25.535378 [info     ] [chr1 ] [step 1.2  ] applying log-transformation
  2025-04-15 08:13:25.549232 [info     ] [chr1 ] [step 1.3  ] projecting interactions onto [1, 0]
  2025-04-15 08:13:25.553946 [info     ] [chr1 ] [step 1    ] preprocessing took 69.937ms
  2025-04-15 08:13:25.558918 [info     ] [chr1 ] [step 2    ] topological data analysis
  2025-04-15 08:13:25.559059 [info     ] [chr1 ] [step 2.1.0] [LT] computing global 1D pseudo-distribution
  2025-04-15 08:13:25.583652 [info     ] [chr1 ] [step 2.2.0] [LT] detection of persistent maxima and corresponding minima
  2025-04-15 08:13:25.583770 [info     ] [chr1 ] [step 2.2.1] [LT] computing persistence
  2025-04-15 08:13:25.625730 [info     ] [chr1 ] [step 2.2.2] [LT] filtering low persistence values
  2025-04-15 08:13:25.626417 [info     ] [chr1 ] [step 2.2.3] [LT] removing seeds overlapping sparse regions
  2025-04-15 08:13:25.686625 [info     ] [chr1 ] [step 2.2.3] [LT] number of seed sites reduced from 1807 to 1748
  2025-04-15 08:13:25.686795 [info     ] [chr1 ] [step 2.3.1] [LT] generating the list of candidate stripes
  2025-04-15 08:13:25.687662 [info     ] [chr1 ] [step 2.3.1] [LT] identified 1748 candidate stripes
  2025-04-15 08:13:25.687864 [info     ] [chr1 ] [step 2.1.0] [UT] computing global 1D pseudo-distribution
  2025-04-15 08:13:25.713048 [info     ] [chr1 ] [step 2.2.0] [UT] detection of persistent maxima and corresponding minima
  2025-04-15 08:13:25.713154 [info     ] [chr1 ] [step 2.2.1] [UT] computing persistence
  2025-04-15 08:13:25.753436 [info     ] [chr1 ] [step 2.2.2] [UT] filtering low persistence values
  2025-04-15 08:13:25.753932 [info     ] [chr1 ] [step 2.2.3] [UT] removing seeds overlapping sparse regions
  2025-04-15 08:13:25.813509 [info     ] [chr1 ] [step 2.2.3] [UT] number of seed sites reduced from 1698 to 1647
  2025-04-15 08:13:25.813687 [info     ] [chr1 ] [step 2.3.1] [UT] generating the list of candidate stripes
  ...
  2025-04-15 08:14:59.123408 [info     ] [IO        ] finalizing file "/tmp/4DNFI9GMP2J8.10000.hdf5"
  2025-04-15 08:14:59.127303 [info     ] [main      ] DONE!
  2025-04-15 08:14:59.127399 [info     ] [main      ] processed 24 chromosomes in 1m:34.490s


Running the above command produces a single output file named ``4DNFI9GMP2J8.10000.hdf5``.

The path to the output file can be changed by using the ``--output-file`` CLI option.

Furthermore, it is possible to save the complete log of a run to a file by specifying the path where to store the log file through the ``--log-file`` CLI option.

Finally, ``stripepy call`` can generate several diagnostic plots that can be of help to gain more insights into the decisions made by the tool.
To generate the diagnostic plots, pass ``--roi=middle`` e specify the path to a folder where to store the plots using ``--plot-dir``.

When processing larger Hi-C matrix, StripePy can take advantage of multicore processors.

The maximum number of CPU cores use by StripePy can be changed through option ``--nproc`` (set to 1 core by default).

Whenever possible, we recommend using 4-8 CPU cores.
Using more than 8 CPU cores is unlikely to result in significantly better computational performance (that is unless your Hi-C dataset is particularly dense).


3) Fetch stripes in BEDPE format
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ``.hdf5`` file produced by ``stripepy call`` contains various kinds of information, including stripe coordinates, various descriptive statistics, persistence vectors, and more.

While having access to all this information can be useful, usually we are mostly interested in the stripe coordinates, which can be fetched using ``stripepy view``.

.. code-block:: console

  # Fetch the first 10 stripes in BEDPE format
  user@dev:/tmp$ stripepy view 4DNFI9GMP2J8.10000.hdf5 | head

  chr1	910000	960000	chr1	930000	3590000
  chr1	1060000	1110000	chr1	1080000	3540000
  chr1	1400000	1490000	chr1	1430000	3540000
  chr1	1600000	1670000	chr1	880000	1620000
  chr1	1670000	1700000	chr1	1680000	2610000
  chr1	1730000	1780000	chr1	1750000	2570000
  chr1	1890000	1940000	chr1	1920000	3540000
  chr1	2020000	2060000	chr1	2020000	3550000
  chr1	2070000	2120000	chr1	2090000	3540000
  chr1	2170000	2230000	chr1	2190000	3500000

  # Redirect stdout to a file
  user@dev:/tmp$ stripepy view 4DNFI9GMP2J8.10000.hdf5 > stripes.bedpe

  # Compress stripes on the fly before writing to a file
  user@dev:/tmp$ stripepy view 4DNFI9GMP2J8.10000.hdf5 | gzip -9 > stripes.bedpe.gz

If you are interested in the biodescriptors associated with each individual stripe, you can pass ``--with-header`` and ``--with-biodescriptors`` when calling ``stripepy view``.

This is the output generated by running ``stripepy view`` on the ``.hdf5`` generated using ``stripepy call`` v1.0.0.
Files generated by older versions of StripePy may have different columns.

.. code-block:: console

  user@dev:/tmp$ stripepy view 4DNFI9GMP2J8.10000.hdf5 --with-biodescriptors --with-header | head

  chrom1	start1	end1	chrom2	start2	end2	top_persistence	inner_mean	inner_std	outer_lsum	outer_lsize	outer_rsum	outer_rsize	min	q1	q2	q3	max	outer_lmean	outer_rmean	outer_mean	rel_change
  chr1	910000	960000	chr1	930000	3590000	0.3984904019	0.2506571890861574	0.14123131812515843	144.79589039186396	801	192.25135582429806	801	0.0	0.17139833204774585	0.22938081658911763	0.28656944403925566	0.9741568863537948	0.18076890186250183	0.24001417705904876	0.2103915394607753	19.138435760573497
  chr1	1060000	1110000	chr1	1080000	3540000	0.0826359687	0.23019685453871336	0.14481608064533394	186.18030631678906	741	179.64345985134207	741	0.0	0.1539575922232785	0.21018481227951455	0.2710230083036015	0.9903418421799679	0.2512554741117261	0.24243381896267485	0.24684464653720048	6.744238626207448
  chr1	1570000	1620000	chr1	1600000	2590000	0.04103011280000002	0.33195798369580404	0.10697974882795283	99.02697827900961	300	85.58022773213244	300	0.10509240613975727	0.2710230083036015	0.3152772184192718	0.3662448898065007	0.9887477925105556	0.3300899275966987	0.2852674257737748	0.3076786766852368	7.891124361343245
  chr1	1600000	1670000	chr1	880000	1620000	0.10798038449999997	0.34673478460468343	0.12547401272240433	79.95811315769556	225	63.18147668278408	225	0.0	0.25904999836303577	0.33447322272887486	0.4155250840484962	0.9887477925105556	0.3553693918119803	0.2808065630345959	0.3180879774232881	9.0059383612837
  chr1	1670000	1700000	chr1	1680000	2610000	0.08521339110000004	0.30510000180174507	0.11602295320194354	84.13794539599031	282	71.90225464650885	282	0.0	0.22938081658911763	0.304010183863723	0.37277167877770423	0.8753282776351561	0.29836150849641957	0.2549725342074782	0.2766670213519489	10.276967710447305
  chr1	1730000	1780000	chr1	1750000	2570000	0.09549401749999997	0.34157106048803376	0.12939228310023276	66.96694495052422	249	77.44100032822071	249	0.06630592590798857	0.25245019336736707	0.32535592427102433	0.41427461878487365	0.9374989352738993	0.26894355401816955	0.3110080334466695	0.28997579373241955	17.792956471126924
  chr1	1780000	1840000	chr1	1780000	2580000	0.14961356020000005	0.31446872398046843	0.14174768874612398	89.65252960337472	243	73.53776985594494	243	0.0	0.2202635181312671	0.28656944403925566	0.3761154144433587	0.9150948504497306	0.3689404510426943	0.3026245673084154	0.33578250917555486	6.347497148501883
  chr1	1890000	1940000	chr1	1920000	3540000	0.13643510830000005	0.27087952940479454	0.15589512088714813	98.34422915113818	489	137.9512119037385	489	0.0	0.17139833204774585	0.2453610817780414	0.3592307814635864	0.989227567682685	0.20111294304936234	0.2821088177990563	0.24161088042420928	12.113961477726793
  chr1	1940000	2020000	chr1	1960000	3590000	0.05824488140000006	0.267059000791004	0.1518633129658817	138.54936114286124	492	138.81994263073136	492	0.0	0.17139833204774585	0.2453610817780414	0.34858989163711346	0.9751278353396942	0.28160439256679115	0.2821543549405109	0.281879373753651	5.257700400455457


4) Quickly visualize architectural stripes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It is often a good idea to visually inspect at least some of the stripes to make sure that the used parameters are suitable for the dataset that was given to ``stripepy call``.

We provide a Jupyter notebook :download:`visualize_stripes_with_highlass.ipynb <../utils/visualize_stripes_with_highlass.ipynb>` to facilitate this visual inspection.
The notebook expects the input file to be in ``.mcool`` format.

If your matrix is in ``.hic`` format you can easily convert it to ``.mcool`` format using hictk by running ``hictk convert matrix.hic matrix.mcool``.
HiGlass cannot visualize single-resolution Cooler files. If you are working with ``.cool`` files you can use hictk to generate ``.mcool`` files by running ``hictk zoomify matrix.cool matrix.mcool``.

For more details, please refer to hictk's documentation: `hictk.readthedocs.io <https://hictk.readthedocs.io/en/stable/quickstart_cli.html>`_.

We recommend running the notebook using `JupyterLab <https://jupyter.org/install>`_.

Furthermore, the notebook depends on a few Python packages that can be installed with ``pip``.
Please make sure that the following packages are installed in a virtual environment that is accessible from Jupyter.
Refer to `IPython <https://ipython.readthedocs.io/en/stable/install/kernel_install.html>`_ documentation for instructions on how to add a virtual environment to Jupyter.

.. code-block:: bash

  pip install 'clodius>=0.20,<1' 'hictkpy>=1,<2' 'higlass-python>=1.2,<2'

Next, launch JupyterLab and open notebook :download:`visualize_stripes_with_highlass.ipynb <../utils/visualize_stripes_with_highlass.ipynb>`.

.. code-block:: bash

  jupyter lab

Before running the notebook, scroll down to the following cell

.. code-block:: bash

  mcool = ensure_file_exists("CHANGEME.mcool")
  bedpe = ensure_file_exists("CHANGEME.bedpe")

and set the ``mcool`` and ``bedpe`` variables to the path to the ``.mcool`` file used to call stripes and the path to the stripe coordinates extracted with ``stripepy view``, respectively.

.. code-block:: bash

  mcool = ensure_file_exists("4DNFI9GMP2J8.mcool")
  bedpe = ensure_file_exists("stripes.bedpe")

Now you are ready to run all cells.

Running the last cell will display a HiGlass window embedded in the Jupyter notebook (note that the interface may take a while to load).

.. only:: not latex

  .. image:: assets/4DNFI9GMP2J8_chr2_156mbp_higlass_view.png

.. only:: latex

  .. image:: assets/4DNFI9GMP2J8_chr2_156mbp_higlass_view.pdf

Generating plots
----------------

StripePy comes with a ``plot`` subcommand that can be used to generate various kinds of plots.

``stripepy plot`` supports the following subcommands:

* ``contact-map`` (``cm``): plot stripes and other features over the Hi-C matrix
* ``pseudodistribution`` (``pd``): plot the pseudo-distribution over the given region of interest
* ``stripe-hist`` (``hist``): generate and plot the histograms showing the distribution of the stripe heights and widths

``stripepy cm`` takes as input a Hi-C matrix in ``.cool``, ``.mcool``, or ``.hic`` format, and optionally the ``.hdf5`` file generated by ``stripepy call``
(this parameter is mandatory when highlighting stripes or stripe seeds).

``stripepy pd`` and ``stripepy hist`` do not require the Hi-C matrix file, and require the ``.hdf5`` file generated by ``stripepy call`` instead.

All three subcommands support specifying a region of interest through the ``--region`` option.
When the commands are run without specifying the region of interest, ``stripepy cm`` and ``stripepy pd`` will generate plots for a random 2.5 Mbp region,
while ``stripepy hist`` will generate histograms using data from the entire genome.

Example usage:

.. code-block:: bash

  # Plot the pseudo-distribution over a region of interest
  stripepy plot pd 4DNFI9GMP2J8.10000.hdf5 /tmp/pseudodistribution.png --region chr2:120100000-122100000

  # Plot the histograms using genome-wide data
  stripepy plot hist 4DNFI9GMP2J8.10000.hdf5 /tmp/stripe_hist_gw.png

  # Plot the Hi-C matrix
  stripepy plot cm 4DNFI9GMP2J8.mcool 10000 /tmp/matrix.png

  # Plot the Hi-C matrix highlighting the stripe seeds
  stripepy plot cm 4DNFI9GMP2J8.mcool 10000 /tmp/matrix_with_seeds.png --stripepy-hdf5 4DNFI9GMP2J8.10000.hdf5 --highlight-seeds

  # Plot the Hi-C matrix highlighting the architectural stripes
  stripepy plot cm 4DNFI9GMP2J8.mcool 10000 /tmp/matrix_with_stripes.png --stripepy-hdf5 4DNFI9GMP2J8.10000.hdf5 --highlight-stripes

Some example plots generated with ``stripepy plot`` can be found in file ``stripepy-plot-test-images.tar.xz`` from `doi.org/10.5281/zenodo.14283921 <https://doi.org/10.5281/zenodo.14283921>`_.
